{"version":3,"sources":["authentication.js"],"names":[],"mappings":";;AAAA,IAAM,MAAM,QAAQ,YAAR,CAAZ;AACA,IAAM,OAAO,QAAQ,kBAAR,CAAb;AACA,IAAM,SAAS,QAAQ,WAAR,CAAf;;AAEA,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AACxB,QAAM,YAAY,IAAI,IAAJ,GAAW,OAAX,EAAlB;AACA,WAAO,IAAI,MAAJ,CAAW,EAAE,KAAK,KAAK,EAAZ,EAAgB,KAAK,SAArB,EAAX,EAA6C,OAAO,MAApD,CAAP;AACH;;AAED,QAAQ,MAAR,GAAiB,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB;AAC1C;AACI,QAAI,IAAJ,CAAS,EAAE,OAAO,aAAa,IAAI,IAAjB,CAAT,EAAT;AACH,CAHD;;AAKA,QAAQ,MAAR,GAAiB,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB;AACtC,QAAM,QAAQ,IAAI,IAAJ,CAAS,KAAvB;AACA,QAAM,WAAW,IAAI,IAAJ,CAAS,QAA1B;AACA,QAAM,WAAW,IAAI,IAAJ,CAAS,QAA1B;;AAEA,QAAG,CAAC,KAAD,IAAU,CAAC,QAAd,EAAwB;AACpB,eAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,EAAC,OAAO,kDAAR,EAArB,CAAP;AACH;;AAED;AACA,SAAK,OAAL,CAAa,EAAE,OAAO,KAAT,EAAb,EAA+B,UAAS,GAAT,EAAc,YAAd,EAA4B;AACvD,YAAG,GAAH,EAAQ;AACJ,mBAAO,KAAK,GAAL,CAAP;AACH;;AAED;AACA,YAAG,YAAH,EAAiB;AACb,mBAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,EAAC,OAAO,iBAAR,EAArB,CAAP;AACH;;AAED;AACA,YAAM,OAAO,IAAI,IAAJ,CAAS;AAClB,mBAAO,KADW;AAElB,sBAAU;AAFQ,SAAT,CAAb;;AAKA,aAAK,IAAL,CAAU,UAAS,GAAT,EAAc;AACpB,gBAAG,GAAH,EAAQ;AACJ,uBAAO,KAAK,GAAL,CAAP;AACH;;AAED;AACA,gBAAI,IAAJ,CAAS,EAAE,OAAO,aAAa,IAAb,CAAT,EAAT;AACH,SAPD;AAQH,KAxBD;AA2BH,CArCD","file":"authentication-compiled.js","sourcesContent":["const jwt = require('jwt-simple');\nconst User = require('../model/user.js');\nconst config = require('../config');\n\nfunction tokenForUser(user) {\n    const timestamp = new Date().getTime();\n    return jwt.encode({ sub: user.id, iat: timestamp }, config.secret);\n}\n\nexports.signin = function(req, res, next) {\n//token for signed in user\n    res.send({ token: tokenForUser(req.user )});\n};\n\nexports.signup = function(req, res, next) {\n    const email = req.body.email;\n    const username = req.body.username;\n    const password = req.body.password;\n\n    if(!email || !password) {\n        return res.status(422).send({error: 'You must provide an email address and a password'})\n    }\n\n    //Check if user exists\n    User.findOne({ email: email }, function(err, existingUser) {\n        if(err) {\n            return next(err);\n        }\n\n        //return err if user exists\n        if(existingUser) {\n            return res.status(422).send({error: 'Email is in use'})\n        }\n\n        //save user if user does not exist\n        const user = new User({\n            email: email,\n            password: password\n        });\n\n        user.save(function(err) {\n            if(err) {\n                return next(err);\n            }\n\n            //creation success response\n            res.json({ token: tokenForUser(user) });\n        });\n    });\n\n\n}"]}