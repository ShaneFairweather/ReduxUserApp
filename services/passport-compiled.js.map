{"version":3,"sources":["passport.js"],"names":[],"mappings":";;AAAA,IAAM,WAAW,QAAQ,UAAR,CAAjB;AACA,IAAM,OAAO,QAAQ,gBAAR,CAAb;AACA,IAAM,SAAS,QAAQ,WAAR,CAAf;AACA,IAAM,cAAc,QAAQ,cAAR,EAAwB,QAA5C;AACA,IAAM,aAAa,QAAQ,cAAR,EAAwB,UAA3C;AACA,IAAM,gBAAgB,QAAQ,gBAAR,CAAtB;;AAEA;AACA,IAAM,eAAe,EAAE,eAAe,OAAjB,EAArB;AACA,IAAM,aAAa,IAAI,aAAJ,CAAkB,YAAlB,EAAgC,UAAS,KAAT,EAAgB,QAAhB,EAA0B,IAA1B,EAAgC;AACnF;AACI,SAAK,OAAL,CAAa,EAAE,OAAO,KAAT,EAAb,EAA+B,UAAS,GAAT,EAAc,IAAd,EAAoB;AAC/C,YAAG,GAAH,EAAQ;AAAE,mBAAO,KAAK,GAAL,CAAP;AAAmB;AAC7B,YAAI,CAAC,IAAL,EAAW;AAAE,mBAAO,KAAK,IAAL,EAAW,KAAX,CAAP;AAA2B;;AAExC;AACA,aAAK,gBAAL,CAAsB,QAAtB,EAAgC,UAAS,GAAT,EAAc,OAAd,EAAuB;AACnD,gBAAG,GAAH,EAAQ;AAAE,uBAAO,KAAK,GAAL,CAAP;AAAkB;AAC5B,gBAAG,CAAC,OAAJ,EAAa;AAAE,uBAAO,KAAK,IAAL,EAAW,KAAX,CAAP;AAA0B;;AAEzC,mBAAO,KAAK,IAAL,EAAW,IAAX,CAAP;AACH,SALD;AAMH,KAXD;AAaH,CAfkB,CAAnB;;AAiBA;AACA,IAAM,aAAa;AACf,oBAAgB,WAAW,UAAX,CAAsB,eAAtB,CADD;AAEf,iBAAa,OAAO;AAFL,CAAnB;;AAKA;AACA,IAAM,WAAW,IAAI,WAAJ,CAAgB,UAAhB,EAA4B,UAAS,OAAT,EAAkB,IAAlB,EAAwB;AACjE;;AAEA;;AAEA;AACA,SAAK,QAAL,CAAc,QAAQ,GAAtB,EAA2B,UAAS,GAAT,EAAc,IAAd,EAAoB;AAC3C,YAAG,GAAH,EAAQ;AAAE,mBAAO,KAAK,GAAL,EAAU,KAAV,CAAP;AAAyB;;AAEnC,YAAG,IAAH,EAAS;AACL,iBAAK,IAAL,EAAW,IAAX;AACH,SAFD,MAEO;AACH,iBAAK,IAAL,EAAW,KAAX;AACH;AAGJ,KAVD;AAWH,CAjBgB,CAAjB;;AAmBA;AACA,SAAS,GAAT,CAAa,QAAb;AACA,SAAS,GAAT,CAAa,UAAb","file":"passport-compiled.js","sourcesContent":["const passport = require('passport');\nconst User = require('../models/user');\nconst config = require('../config');\nconst JwtStrategy = require('passport-jwt').Strategy;\nconst ExtractJwt = require('passport-jwt').ExtractJwt;\nconst LocalStrategy = require('passport-local');\n\n//Create local strategy\nconst localOptions = { usernameField: 'email' };\nconst localLogin = new LocalStrategy(localOptions, function(email, password, done) {\n//verify username and password, call done\n    User.findOne({ email: email }, function(err, user) {\n        if(err) { return done(err); }\n        if (!user) { return done(null, false); }\n\n        //compare passwords\n        user.comparePasswords(password, function(err, isMatch) {\n            if(err) { return done(err) };\n            if(!isMatch) { return done(null, false) }\n\n            return done(null, user);\n        })\n    });\n\n});\n\n//jwt configuration\nconst jwtOptions = {\n    jwtFromRequest: ExtractJwt.fromHeader('authorization'),\n    secretOrKey: config.secret\n};\n\n//create jwt strategy\nconst jwtLogin = new JwtStrategy(jwtOptions, function(payload, done) {\n    //see if userid in payload exists in database\n\n    //call done with user\n\n    //call done without user\n    User.findById(payload.sub, function(err, user) {\n        if(err) { return done(err, false) }\n\n        if(user) {\n            done(null, user);\n        } else {\n            done(null, false);\n        }\n\n\n    })\n});\n\n//tell passport to use jwt\npassport.use(jwtLogin);\npassport.use(localLogin);"]}